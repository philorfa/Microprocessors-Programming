. include "m16def.inc"
. def temp = r16
. def counter = r17
. def leds = r18
. DSEG
_tmp_ : . byte 2
. CSEG
. org 0x0
;-------. INITIALIZE STACK .------;
ldi temp , HIGH ( RAMEND)
out SPH , temp
ldi temp , LOW ( RAMEND)
out SPL , temp
;--------. SET INPUT AND OUTPUT .-------;
ser temp
out DDRB , temp ; PORTB is output
ldi r24 ,( 1 << PC7 ) | ( 1 << PC6 ) | ( 1 << PC5 ) | ( 1 << PC4 ) ; enable input
; from keyboard
out DDRC , r24
clr r24
sts _tmp_ , r24
;----------. READ FROM KEYBOARD .-------------;
input:
ldi r24 , 20 ; delay time for rising edge
call scan_keypad_rising_edge ; read input and avoid sparkling
call keypad_to_ascii ; turn our input into ascii
cpi r24 , 0 ; if r24 = 0 nothing was pressed
breq input
cpi r24 , '0' ; first input must be 0
brne wrong ; if not start blinking
second:
ldi r24 , 20
call scan_keypad_rising_edge
call keypad_to_ascii
cpi r24 ,0
breq second
cpi r24 , '6' ; second input must be 6
brne wrong ; if not start blinking
;--------. ROUTINE FOR CORRECT COMBINATION .------;
correct:
ser leds
out PORTB , leds ; LIGHT IT UUUUPP
ldi r24 , low ( 4000)
ldi r25 , high ( 4000)
rcall wait_msec
clr leds
out PORTB , leds ;; SHUT IT DOWN
rjmp input
;--------. ROUTINE FOR WRONG COMBINATION .--------;
wrong:
ldi counter , 8 ; 8 * ( 0 , 25 + 0 , 25 ) = 4sec
con:
ser leds
out PORTB , leds
ldi r24 , low ( 250)
ldi r25 , high ( 250)
rcall wait_msec
clr leds
out PORTB , leds
ldi r24 , low ( 250)
ldi r25 , high ( 250)
rcall wait_msec
dec counter
cpi counter ,0
brne con
rjmp input
scan_row:
ldi r25 , 0x08 ; ???????????? ?? 0000 1000
back_ :
lsl r25 ; ???????? ???????? ??? 1 ????? ??????
dec r24 ; ???? ????? ? ??????? ??? ???????
brne back_
out PORTC , r25 ; ? ?????????? ?????? ??????? ??? ?????? 1
nop
nop ; ??????????? ??? ?? ???????? ?? ????? ?
?????? ??????????
in r24 , PINC ; ??????????? ?? ?????? (??????) ??? ?????????
??? ????? ?????????
andi r24 , 0x0f ; ????????????? ?? 4 LSB ???? ?? 1 ???????? ???
????? ?????????
ret ; ?? ?????????.
scan_keypad:
ldi r24 , 0x01 ; ?????? ??? ????? ?????? ??? ?????????????
rcall scan_row
swap r24 ; ?????????? ?? ??????????
mov r27 , r24 ; ??? 4 msb ??? r27
ldi r24 , 0x02 ; ?????? ?? ??????? ?????? ??? ?????????????
rcall scan_row
add r27 , r24 ; ?????????? ?? ?????????? ??? 4 lsb ??? r27
ldi r24 , 0x03 ; ?????? ??? ????? ?????? ??? ?????????????
rcall scan_row
swap r24 ; ?????????? ?? ??????????
mov r26 , r24 ; ??? 4 msb ??? r26
ldi r24 , 0x04 ; ?????? ??? ??????? ?????? ??? ?????????????
rcall scan_row
add r26 , r24 ; ?????????? ?? ?????????? ??? 4 lsb ??? r26
movw r24 , r26 ; ???????? ?? ?????????? ????? ???????????
r25 : r24
ret
scan_keypad_rising_edge:
mov r22 , r24 ; ?????????? ?? ????? ???????????? ???? r22
rcall scan_keypad ; ?????? ?? ???????????? ??? ?????????? ?????????
push r24 ; ??? ?????????? ?? ??????????
push r25
mov r24 , r22 ; ??????????? r22 ms (??????? ????? 10 - 20 msec
??? ??????????? ??? ???
ldi r25 , 0 ; ???????????? ??? ????????????? ?????????????
????????????)
rcall wait_msec
rcall scan_keypad ; ?????? ?? ???????????? ???? ??? ????????
pop r23 ; ??? ??????? ?????????? ???????????
pop r22
and r24 , r22
and r25 , r23
ldi r26 , low ( _tmp_ ) ; ??????? ??? ????????? ??? ????????? ????
ldi r27 , high ( _tmp_ ) ; ??????????? ????? ??? ???????? ????? r27 : r26
ld r23 , X+
ld r22 ,X
st X , r24 ; ?????????? ??? RAM ?? ??? ?????????
st - X , r25 ; ??? ?????????
com r23
com r22 ; ???? ???? ????????? ??? ????? «?????»
???????
and r24 , r22
and r25 , r23
ret
keypad_to_ascii :
movw r26 , r24
ldi r24 , '*'
sbrc r26 ,0
ret
ldi r24 , '0'
sbrc r26 ,1
ret
ldi r24 , '#'
sbrc r26 ,2
ret
ldi r24 , 'D'
sbrc r26 , 3
ret
ldi r24 , '7'
sbrc r26 ,4
ret
ldi r24 , '8'
sbrc r26 ,5
ret
ldi r24 , '9'
sbrc r26 ,6
ret
ldi r24 , 'C'
sbrc r26 ,7
ret
ldi r24 , '4'
sbrc r27 , 0
ret
ldi r24 , '5'
sbrc r27 ,1
ret
ldi r24 , '6'
sbrc r27 ,2
ret
ldi r24 , 'B'
sbrc r27 ,3
ret
ldi r24 , '1'
sbrc r27 ,4
ret
ldi r24 , '2'
sbrc r27 ,5
ret
ldi r24 , '3'
sbrc r27 ,6
ret
ldi r24 , 'A'
sbrc r27 ,7
ret
clr r24
ret
;--------. WAIT ROUTINES .--------;
wait_msec:
push r24
push r25
ldi r24 , low ( 998)
ldi r25 , high ( 998)
rcall wait_usec
pop r25
pop r24
sbiw r24 ,1
brne wait_msec
ret
wait_usec:
sbiw r24 ,1
nop
nop
nop
nop
brne wait_usec
ret